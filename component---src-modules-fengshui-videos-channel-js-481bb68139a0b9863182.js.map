{"version":3,"sources":["webpack:///./src/modules/fengshui/videos/channel.js"],"names":["ImageContainer","styled","div","Component","data","location","qs","querystring","parse","search","useState","channel","setChannel","Date","now","recentVideoDS","setRecentVideoDS","useEffect","recentVideos","allAggVideo","edges","filter","node","channelId","id","map","console","log","key","image","thumbnails","high","url","title","publishTime","allChannel","find","max","gap","dataList","render","item","index","onClick","navigate","src","imageProps","fit","fill","direction","justify","query"],"mappings":"4FAAA,+KAYMA,EAAiBC,UAAOC,IAAV,8EAAGD,CAAH,qBAiFLE,UA7EG,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,EAAKC,IAAYC,MAAMH,EAASI,QADE,EAEVC,mBAAS,IAAhCC,EAFiC,KAExBC,EAFwB,QA0B9B,IAAIC,KAAKA,KAAKC,MAAQ,QAGIJ,mBAAS,KA7BL,aA8BRA,mBAAS,KA9BD,aA+BEA,mBAAS,KAA5CK,EA/BiC,KA+BlBC,EA/BkB,KA0DxC,OA1BAC,qBAAU,WACR,IAIMC,EAFYd,EAAKe,YAAYC,MAGlCC,QAAO,qBAAGC,KAAgBC,YAAcjB,EAAGkB,MAC3CC,KAAI,YAAe,IAAD,IAAXH,EAAW,EAAXA,KAEN,OADAI,QAAQC,IAAIL,GACL,CACLE,GAAIF,EAAKM,IACTC,MAAOP,SAAF,UAAEA,EAAMQ,kBAAR,iBAAE,EAAkBC,YAApB,aAAE,EAAwBC,IAC/BC,MAAOX,EAAKW,MACZC,YAAaZ,EAAKY,YAClBX,UAAWD,EAAKC,cAIdZ,EAAUP,EAAK+B,WAAWf,MAC/BgB,MAAK,qBAAGd,KAAgBC,YAAcjB,EAAGkB,MAE1CZ,EAAWD,GAGXK,EAAiBE,KAChB,CAACd,EAAKe,YAAYC,MAAOhB,EAAK+B,WAAWf,QAE1C,oCAEI,kBAAC,IAAD,CAAQiB,IAAI,QACV,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKC,IAAI,SACP,gCAAO3B,SAAP,UAAOA,EAASW,YAAhB,aAAO,EAAeW,MAAtB,KACA,kBAAC,IAAD,CAAUM,SAAUxB,EAAeyB,OA9DzB,SAACC,EAAMC,GACzB,OACE,kBAAC1C,EAAD,CACE2C,QAAS,WACPC,YAAS,mBAAmBH,EAAKjB,MAEpC,kBAAC,IAAD,KACC,kBAAC,IAAD,CACEqB,IAAKJ,EAAKZ,MACViB,WAAY,CACVC,IAAK,QACLC,KAAM,UAGV,kBAAC,IAAD,CAAKC,UAAU,MAAMX,IAAI,QAAQY,QAAQ,WAGxCT,EAAKR,MAXP,IAWc,sCA2Dd,IAAMkB,EAAK","file":"component---src-modules-fengshui-videos-channel-js-481bb68139a0b9863182.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\nimport { Box } from \"grommet\"\nimport { graphql } from \"gatsby\"\nimport styled from \"styled-components\"\nimport { navigate } from \"gatsby\"\nimport Layout from \"../../../containers/layout\"\nimport Image from \"../../../components/Image\"\nimport { format, parseISO } from 'date-fns'\nimport CardList from \"../../../components/CardListing/NewCardList\"\nimport querystring from \"query-string\"\nimport Ad from \"../../../containers/Ad\"\n\nconst ImageContainer = styled.div`\n  cursor: pointer;\n`\n\nconst Component = ({ data, location }) => {\n  const qs = querystring.parse(location.search)\n  const [channel, setChannel] = useState(\"\")\n  const renderImage = (item, index) => {\n    return (\n      <ImageContainer\n        onClick={() => {\n          navigate(`/videos/view?id=${item.id}`)\n        }}\n      ><Box> \n        <Image\n          src={item.image}\n          imageProps={{\n            fit: \"cover\",\n            fill: \"true\",\n          }}\n        />\n        <Box direction=\"row\" gap=\"small\" justify=\"center\">\n        </Box>\n\n        {item.title} <br />\n        \n        </Box>\n      </ImageContainer>\n    )\n  }\n  const d = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) \n\n\n  const [datasource, setDatasource] = useState([])\n  const [channels, setChannels] = useState([])\n  const [recentVideoDS, setRecentVideoDS] = useState([])\n  useEffect(() => {\n    let result = []\n\n    const allVideos = data.allAggVideo.edges;\n\n    const recentVideos = allVideos\n    .filter(({ node }) => node.channelId === qs.id)\n    .map(({ node }) => {\n      console.log(node)\n      return {\n        id: node.key,\n        image: node?.thumbnails?.high?.url,\n        title: node.title,\n        publishTime: node.publishTime,\n        channelId: node.channelId\n      }\n    })\n\n    const channel = data.allChannel.edges\n    .find(({ node }) => node.channelId === qs.id)\n    \n    setChannel(channel)\n\n\n    setRecentVideoDS(recentVideos)\n  }, [data.allAggVideo.edges, data.allChannel.edges])\n  return (\n    <>\n      {\n        <Layout max=\"100%\">\n          <Ad />\n          <Box gap=\"small\">\n            <h3> { channel?.node?.title } </h3>\n            <CardList dataList={recentVideoDS} render={renderImage} />\n\n            \n          </Box>\n\n          \n        </Layout>\n      }\n    </>\n  )\n}\n\nexport default Component\n\nexport const query = graphql`\nquery MyQuery33ee3 {\n  allAggVideo(sort: {fields: publishedAt, order: DESC}) {\n    edges {\n      node {\n        key\n        channelId\n        title\n        thumbnails {\n          high {\n            url\n          }\n        }\n        publishedAt\n        publishTime\n      }\n    }\n  }\n\n  allChannel {\n    edges {\n      node {\n        id\n        title\n        channelId\n      }\n    }\n  }\n}\n`\n"],"sourceRoot":""}